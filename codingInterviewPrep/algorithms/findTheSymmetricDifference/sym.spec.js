const assert = require("assert")
const { sym } = require("./sym")

describe("Symmetric difference", () => {
    it('sym([1, 2, 3], [5, 2, 1, 4]) должен вернуться[3, 4, 5].', () => {
        assert.deepEqual([3, 4, 5], sym([1, 2, 3], [5, 2, 1, 4]))
    })
    it('sym([1, 2, 3], [5, 2, 1, 4]) должно содержать только три элемента.', () => {
        assert.equal(3, sym([1, 2, 3], [5, 2, 1, 4]).length)
    })
    it('sym([1, 2, 3, 3], [5, 2, 1, 4]) должен вернуться[3, 4, 5].', () => {
        assert.deepEqual([3, 4, 5], sym([1, 2, 3, 3], [5, 2, 1, 4]))
    })
    it('sym([1, 2, 3, 3], [5, 2, 1, 4]) должно содержать только три элемента.', () => {
        assert.deepEqual(3, sym([1, 2, 3, 3], [5, 2, 1, 4]).length)
    })
    it('sym([1, 2, 3], [5, 2, 1, 4, 5]) должен вернуться[3, 4, 5].', () => {
        assert.deepEqual([3, 4, 5], sym([1, 2, 3], [5, 2, 1, 4, 5]))
    })
    it('sym([1, 2, 3], [5, 2, 1, 4, 5]) должно содержать только три элемента.', () => {
        assert.deepEqual(3, sym([1, 2, 3], [5, 2, 1, 4, 5]).length)
    })
    it('sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) должен вернуться[1, 4, 5].', () => {
        assert.deepEqual([1, 4, 5], sym([1, 2, 5], [2, 3, 5], [3, 4, 5]))
    })
    it('sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) должно содержать только три элемента.', () => {
        assert.deepEqual(3, sym([1, 2, 5], [2, 3, 5], [3, 4, 5]).length)
    })
    it('sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) должен вернуться[1, 4, 5].', () => {
        assert.deepEqual([1, 4, 5], sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]))
    })
    it('sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) должно содержать только три элемента.', () => {
        assert.deepEqual(3, sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]).length)
    })
    it('sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) должен вернуться[2, 3, 4, 6, 7].', () => {
        assert.deepEqual([2, 3, 4, 6, 7], sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]))
    })
    it('sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) должно содержать только пять элементов.', () => {
        assert.deepEqual(5, sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]).length)
    })
    it('sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) должен вернуться[1, 2, 4, 5, 6, 7, 8, 9].', () => {
        assert.deepEqual([1, 2, 4, 5, 6, 7, 8, 9], sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]))
    })
    it('sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) должно содержать только восемь элементов.', () => {
        assert.deepEqual(8, sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]).length)
    })
})





























